//created on: 09-abr-2014
package com.plugtree.dm.dmdemo;

import com.plugtree.dm.dmdemo.*;
import org.jbpm.workflow.instance.impl.WorkflowProcessInstanceImpl;
import function com.plugtree.dm.core.Message.*;
import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

global com.plugtree.dm.dmdemo.Employee hrvp;
global com.plugtree.dm.dmdemo.CompensationDepartment payrollDepartment;
global com.plugtree.dm.dmdemo.CompensationDepartment travelDepartment;
global com.plugtree.dm.dmdemo.CompensationDepartment vacationDepartment;
global java.util.List messages;
global org.slf4j.Logger logger;

dialect "mvel"

/**

======== Validation rules ========

**/

rule "Validate Exists Leave Request"
ruleflow-group "validate-inputs"
salience 10000
no-loop
    when
        $pi:WorkflowProcessInstanceImpl(variables["leaveRequest"]==null)
    then
   		$pi.setVariable("validInputs", Boolean.FALSE);
   		messages.add(newErrorMessage("Working Memory does not contain an instance of LeaveRequest"));
   		update($pi);
end

rule "Validate Valid Planned Start and End Dates"
ruleflow-group "validate-inputs"
salience 10000
no-loop
    when
        	$pi: WorkflowProcessInstanceImpl()
        	$r:LeaveRequest(plannedStartDate after plannedEndDate) from $pi.variables["leaveRequest"] 
    then
   		$pi.setVariable("validInputs", Boolean.FALSE);
   		messages.add(newErrorMessage("The planned end date must be after the planned start date"));
   		update($pi);
end


/**

======== Leave rules ========

**/

rule "calculate approval type"
salience 1000
ruleflow-group "leave-rules"
	when
		WorkflowProcessInstanceImpl($v:variables["approvals"])
		$approvals:List(this==$v)
	then
		logger.debug("==================> Leave Rules " + $approvals.size);
		for (LeaveApproval a:$approvals) {
			logger.debug("\t==> " + a);
		}
end


/**

======== Approval rules ========

**/

rule "President request"
ruleflow-group "select-approvers"
no-loop
    when
    	$pi: WorkflowProcessInstanceImpl()
        $r:LeaveRequest(status == Status.OPEN, employee.role == Role.PRESIDENT) from $pi.variables["leaveRequest"]
    then
        logger.debug("Hello Mr. President " + $r.employee + ". The HR VP will approve your request.");
        Collection approvals = (Collection) $pi.getVariable("approvals");
        approvals.add(LeaveApproval.newLeaveApproval($r, hrvp));
end

rule "Direct Supervisor approval"
ruleflow-group "select-approvers"
    when
       	$pi: WorkflowProcessInstanceImpl();
        $r:LeaveRequest(status == Status.OPEN, employee.role != Role.PRESIDENT, employee.directSupervisor != null) from $pi.variables["leaveRequest"];
    then
        logger.debug("Hello " + $r.employee + ". Your Direct Supervisor (" + $r.employee.directSupervisor + ") will approve your request.");
        Collection approvals = (Collection) $pi.getVariable("approvals");
        approvals.add(LeaveApproval.newDirectSupervisorLeaveApproval($r));
end


rule "New Annual request without salary"
ruleflow-group "select-approvers"
	when
		$pi: WorkflowProcessInstanceImpl();
		$r:LeaveRequest(status == Status.OPEN, type == Type.NEW, leaveType == LeaveType.ANNUAL, requestPayment == false,
						employee.role != Role.PRESIDENT) from $pi.variables["leaveRequest"];
	then
        logger.debug("Hello " + $r.employee + ". New requests for Annual leaves without salary must be approved by the following Compensation Departments: Vacation");
        $r.addCompensationDepartment(vacationDepartment);
end


rule "New Annual request with salary"
ruleflow-group "select-approvers"
	when
		$pi: WorkflowProcessInstanceImpl();
		$r:LeaveRequest(status == Status.OPEN, type == Type.NEW, leaveType == LeaveType.ANNUAL, requestPayment == true,
		employee.role != Role.PRESIDENT) from $pi.variables["leaveRequest"];
	then
        logger.debug("Hello " + $r.employee + ". New requests for Annual leaves with salary must be approved by the following Compensation Departments: Vacation, Payroll and Travel");
        $r.addCompensationDepartment(payrollDepartment);
        $r.addCompensationDepartment(travelDepartment);
        $r.addCompensationDepartment(vacationDepartment);
end


rule "Update or Cancel of Annual request without salary"
ruleflow-group "select-approvers"
	when
		$pi: WorkflowProcessInstanceImpl();
		$r:LeaveRequest(status == Status.OPEN, type in (Type.MODIFY, Type.CANCEL), leaveType == LeaveType.ANNUAL, requestPayment == false,
		employee.role != Role.PRESIDENT) from $pi.variables["leaveRequest"];
	then
        logger.debug("Hello " + $r.employee + ". Update/Cancel requests for Annual leaves without salary must be approved by the following Compensation Departments: Vacation, Travel");
        $r.addCompensationDepartment(vacationDepartment);
        $r.addCompensationDepartment(travelDepartment);
end

rule "Update or Cancel of Annual request with salary"
ruleflow-group "select-approvers"
	when
		$pi: WorkflowProcessInstanceImpl();
		$r:LeaveRequest(status == Status.OPEN, type in (Type.MODIFY, Type.CANCEL), leaveType == LeaveType.ANNUAL, requestPayment == true,
		employee.role != Role.PRESIDENT) from $pi.variables["leaveRequest"];
	then
        logger.debug("Hello " + $r.employee + ". Update/Cancel requests for Annual leaves with salary must be approved by the following Compensation Departments: Vacation, Travel, Payroll");
        $r.addCompensationDepartment(payrollDepartment);
        $r.addCompensationDepartment(travelDepartment);
        $r.addCompensationDepartment(vacationDepartment);
end


rule "New Education without salary Leave"
ruleflow-group "select-approvers"
	when
		$pi: WorkflowProcessInstanceImpl();
		$r:LeaveRequest(status == Status.OPEN, type == Type.NEW, leaveType == LeaveType.EDUCATION,
								$e:employee, $e.role != Role.PRESIDENT) from $pi.variables["leaveRequest"];
	then
        logger.debug("Hello " + $r.employee + ". New requests for Education without salary Leave must approved by the GM, VP and the Vacation Compensation Department");
        Collection approvals = (Collection) $pi.getVariable("approvals");
        approvals.add(LeaveApproval.newLeaveApproval($r, $e.getSupervisor(Role.VICE_PRESIDENT)));
        Collection approvals = (Collection) $pi.getVariable("approvals");
        approvals.add(LeaveApproval.newLeaveApproval($r, hrvp));
        $r.addCompensationDepartment(vacationDepartment);
end


rule "New Exam leave"
ruleflow-group "select-approvers"
	when
		$pi: WorkflowProcessInstanceImpl();
		$r:LeaveRequest(status == Status.OPEN, type == Type.NEW, leaveType == LeaveType.EXAM, employee.role != Role.PRESIDENT) from $pi.variables["leaveRequest"];
	then
        logger.debug("Hello " + $r.employee + ". New requests for Exam Leaves must be approved by the following Compensation Departments: Vacation");
        $r.addCompensationDepartment(vacationDepartment);
end

rule "Exceptional no more than 2 months leave"
ruleflow-group "select-approvers"
	when
		$pi: WorkflowProcessInstanceImpl();
		$r:LeaveRequest(status == Status.OPEN, type == Type.NEW, leaveType == LeaveType.EXCEPTIONAL,
		plannedStartDate before [0d, 60d] plannedEndDate, employee.role != Role.PRESIDENT)  from $pi.variables["leaveRequest"];
	then
        logger.debug("Hello " + $r.employee + ". New requests for Exceptional Leaves (<=2 months) must also be approved by your GM and the following Compensation Departments: Vacation, Payroll");
        Collection approvals = (Collection) $pi.getVariable("approvals");
        approvals.add(LeaveApproval.newLeaveApproval($r, $r.employee.getSupervisor(Role.GENERAL_MANAGER)));
        $r.addCompensationDepartment(vacationDepartment);
        $r.addCompensationDepartment(payrollDepartment);
end

rule "Exceptional more than 2 months leave"
ruleflow-group "select-approvers"
	when
		$pi: WorkflowProcessInstanceImpl();
		$r:LeaveRequest(status == Status.OPEN, type == Type.NEW, leaveType == LeaveType.EXCEPTIONAL,
		plannedStartDate before [61d] plannedEndDate, employee.role != Role.PRESIDENT)  from $pi.variables["leaveRequest"];
	then
        logger.debug("Hello " + $r.employee + ". New requests for Exceptional Leaves (> 2 months) must also be approved by your GM, VP and the following Compensation Departments: Vacation, Payroll");
        Collection approvals = (Collection) $pi.getVariable("approvals");
        approvals.add(LeaveApproval.newLeaveApproval($r, $r.employee.getSupervisor(Role.GENERAL_MANAGER)));
        approvals.add(LeaveApproval.newLeaveApproval($r, $r.employee.getSupervisor(Role.VICE_PRESIDENT)));
        $r.addCompensationDepartment(vacationDepartment);
        $r.addCompensationDepartment(payrollDepartment);
end

rule "Marriage leave"
ruleflow-group "select-approvers"
	when
		$pi: WorkflowProcessInstanceImpl();
		$r:LeaveRequest(status == Status.OPEN, type == Type.NEW, leaveType == LeaveType.MARRIAGE,
				employee.role != Role.PRESIDENT)  from $pi.variables["leaveRequest"];
	then
        logger.debug("Hello " + $r.employee + ". New requests for Marriage Leaves must be approved by the following Compensation Departments: Vacation");
        $r.addCompensationDepartment(vacationDepartment);
end

rule "Paternity leave"
ruleflow-group "select-approvers"
	when
		$pi: WorkflowProcessInstanceImpl();
		$r:LeaveRequest(status == Status.OPEN, type == Type.NEW, leaveType == LeaveType.PATERNITY,
				employee.role != Role.PRESIDENT)  from $pi.variables["leaveRequest"];
	then
        logger.debug("Hello " + $r.employee + ". New requests for Paternity Leaves must be approved by the following Compensation Departments: Vacation");
        $r.addCompensationDepartment(vacationDepartment);
end

rule "Transfer leave"
ruleflow-group "select-approvers"
	when
		$pi: WorkflowProcessInstanceImpl();
		$r:LeaveRequest(status == Status.OPEN, type == Type.NEW, leaveType == LeaveType.TRANSFER,
				employee.role != Role.PRESIDENT)  from $pi.variables["leaveRequest"];
	then
        logger.debug("Hello " + $r.employee + ". New requests for Sports Leaves must be approved by the following Compensation Departments: Vacation");
        $r.addCompensationDepartment(vacationDepartment);
end

rule "Annual leave (without salary) with total days of sick leave is more than 30 days"
ruleflow-group "select-approvers"
	when
			$r:LeaveRequest(
					status == Status.OPEN, type == Type.NEW, 
					totalAbsenceDaysUntilNow > 30, approvals.size() > 0, 
					$approvals: approvals,
					leaveType == LeaveType.ANNUAL,
					requestPayment == false
			) 
	then
		for (int index = 0; index < $approvals.size(); index++) {
			LeaveApproval approval = $approvals.get(index);
			Map params = new HashMap();
			params.put("reviewAndApprove", approval.getType());
			params.put("approvalType", approval.getType());
			params.put("vacationBalance", Boolean.TRUE);
			Object obj = kcontext.getKieRuntime().startProcess("DMDemo.vac01", params);
			WorkflowProcessInstanceImpl proc = (WorkflowProcessInstanceImpl) obj;
			proc.getVariable("approvedBySupervisor");//TODO
			proc.getVariable("approvedByVacationService");//TODO
		}
end

rule "Compasionate leave with total days of sick leave is more than 30 days"
ruleflow-group "select-approvers"
	when
			$r:LeaveRequest(
					status == Status.OPEN, type == Type.NEW, 
					totalAbsenceDaysUntilNow > 30, approvals.size() > 0, 
					$approvals: approvals,
					leaveType == LeaveType.COMPASIONATE,
					requestPayment == true
			) 
	then
		for (int index = 0; index < $approvals.size(); index++) {
			LeaveApproval approval = $approvals.get(index);
			Map params = new HashMap();
			params.put("reviewAndApprove", approval.getType());
			params.put("approvalType", approval.getType());
			params.put("vacationBalance", Boolean.TRUE);
			Object obj = kcontext.getKieRuntime().startProcess("DMDemo.vac01", params);
			WorkflowProcessInstanceImpl proc = (WorkflowProcessInstanceImpl) obj;
			proc.getVariable("approvedBySupervisor"); //TODO
			proc.getVariable("approvedByVacationService");//TODO
		}
end

rule "Paternity leave with total days of sick leave is more than 30 days"
ruleflow-group "select-approvers"
	when
			$r:LeaveRequest(
					status == Status.OPEN, type == Type.NEW, 
					totalAbsenceDaysUntilNow > 30, approvals.size() > 0, 
					$approvals: approvals,
					leaveType == LeaveType.PATERNITY,
					requestPayment == true
			) 
	then
		for (int index = 0; index < $approvals.size(); index++) {
			LeaveApproval approval = $approvals.get(index);
			Map params = new HashMap();
			params.put("reviewAndApprove", approval.getType());
			params.put("approvalType", approval.getType());
			params.put("vacationBalance", Boolean.TRUE);
			Object obj = kcontext.getKieRuntime().startProcess("DMDemo.vac01", params);
			WorkflowProcessInstanceImpl proc = (WorkflowProcessInstanceImpl) obj;
			proc.getVariable("approvedBySupervisor"); //TODO
			proc.getVariable("approvedByVacationService");//TODO
		}
end

rule "Marriage leave with total days of sick leave is more than 30 days"
ruleflow-group "select-approvers"
	when
			$r:LeaveRequest(
					status == Status.OPEN, type == Type.NEW, 
					totalAbsenceDaysUntilNow > 30, approvals.size() > 0, 
					$approvals: approvals,
					leaveType == LeaveType.MARRIAGE,
					requestPayment == true
			) 
	then
		for (int index = 0; index < $approvals.size(); index++) {
			LeaveApproval approval = $approvals.get(index);
			Map params = new HashMap();
			params.put("reviewAndApprove", approval.getType());
			params.put("approvalType", approval.getType());
			params.put("vacationBalance", Boolean.TRUE);
			Object obj = kcontext.getKieRuntime().startProcess("DMDemo.vac01", params);
			WorkflowProcessInstanceImpl proc = (WorkflowProcessInstanceImpl) obj;
			proc.getVariable("approvedBySupervisor"); //TODO
			proc.getVariable("approvedByVacationService");//TODO
		}
end

/*rule "Sports leave with total days of sick leave is more than 30 days"
ruleflow-group "select-approvers"
	when
			$r:LeaveRequest(
					status == Status.OPEN, type == Type.NEW, 
					totalAbsenceDaysUntilNow > 30, approvals.size() > 0, 
					$approvals: approvals,
					leaveType == LeaveType.SPORTS
			) 
	then
		for (int index = 0; index < $approvals.size(); index++) {
			LeaveApproval approval = $approvals.get(index);
			Map params = new HashMap();
			params.put("reviewAndApprove", approval.getType());
			params.put("approvalType", approval.getType());
			params.put("vacationBalance", Boolean.TRUE);
			Object obj = kcontext.getKieRuntime().startProcess("DMDemo.vac01", params);
			WorkflowProcessInstanceImpl proc = (WorkflowProcessInstanceImpl) obj;
			proc.getVariable("approvedBySupervisor"); //TODO
			proc.getVariable("approvedByVacationService");//TODO
		}
end*/

rule "Exam leave with total days of sick leave is more than 30 days"
ruleflow-group "select-approvers"
	when
			$r:LeaveRequest(
					status == Status.OPEN, type == Type.NEW, 
					totalAbsenceDaysUntilNow > 30, approvals.size() > 0, 
					$approvals: approvals,
					leaveType == LeaveType.EXAM,
					requestPayment == true
			) 
	then
		for (int index = 0; index < $approvals.size(); index++) {
			LeaveApproval approval = $approvals.get(index);
			Map params = new HashMap();
			params.put("reviewAndApprove", approval.getType());
			params.put("approvalType", approval.getType());
			params.put("vacationBalance", Boolean.TRUE);
			Object obj = kcontext.getKieRuntime().startProcess("DMDemo.vac01", params);
			WorkflowProcessInstanceImpl proc = (WorkflowProcessInstanceImpl) obj;
			proc.getVariable("approvedBySupervisor"); //TODO
			proc.getVariable("approvedByVacationService");//TODO
		}
end

rule "Transfer leave with total days of sick leave is more than 30 days"
ruleflow-group "select-approvers"
	when
			$r:LeaveRequest(
					status == Status.OPEN, type == Type.NEW, 
					totalAbsenceDaysUntilNow > 30, approvals.size() > 0, 
					$approvals: approvals,
					leaveType == LeaveType.TRANSFER,
					requestPayment == true
			) 
	then
		for (int index = 0; index < $approvals.size(); index++) {
			LeaveApproval approval = $approvals.get(index);
			Map params = new HashMap();
			params.put("reviewAndApprove", approval.getType());
			params.put("approvalType", approval.getType());
			params.put("vacationBalance", Boolean.TRUE);
			Object obj = kcontext.getKieRuntime().startProcess("DMDemo.vac01", params);
			WorkflowProcessInstanceImpl proc = (WorkflowProcessInstanceImpl) obj;
			proc.getVariable("approvedBySupervisor"); //TODO
			proc.getVariable("approvedByVacationService");//TODO
		}
end

rule "Annual leave with total days of sick leave is more than 30 days"
ruleflow-group "select-approvers"
	when
			$r:LeaveRequest(
					status == Status.OPEN, type == Type.NEW, 
					totalAbsenceDaysUntilNow > 30, approvals.size() > 0, 
					$approvals: approvals,
					leaveType == LeaveType.ANNUAL,
					requestPayment == true
			) 
	then
		for (int index = 0; index < $approvals.size(); index++) {
			LeaveApproval approval = $approvals.get(index);
			Map params = new HashMap();
			params.put("reviewAndApprove", approval.getType());
			params.put("approvalType", approval.getType());
			params.put("vacationBalance", Boolean.TRUE);
			Object obj = kcontext.getKieRuntime().startProcess("DMDemo.vac02", params);
			WorkflowProcessInstanceImpl proc = (WorkflowProcessInstanceImpl) obj;
			proc.getVariable("approvedBySupervisor"); //TODO
			proc.getVariable("approvedByVacationService");//TODO
			proc.getVariable("outputPayrollService");//TODO
		}
end

rule "Education leave (without salary) with total days of sick leave is more than 30 days"
ruleflow-group "select-approvers"
	when
			$r:LeaveRequest(
					status == Status.OPEN, type == Type.NEW, 
					totalAbsenceDaysUntilNow > 30, approvals.size() > 0, 
					$approvals: approvals,
					leaveType == LeaveType.EDUCATION,
					requestPayment == false
			) 
	then
		for (int index = 0; index < $approvals.size(); index++) {
			LeaveApproval approval = $approvals.get(index);
			Map params = new HashMap();
			params.put("reviewAndApprove", approval.getType());
			params.put("approvalType", approval.getType());
			params.put("vacationBalance", Boolean.TRUE);
			Object obj = kcontext.getKieRuntime().startProcess("DMDemo.vac02", params);
			WorkflowProcessInstanceImpl proc = (WorkflowProcessInstanceImpl) obj;
			proc.getVariable("approvedBySupervisor"); //TODO
			proc.getVariable("approvedByVacationService");//TODO
			proc.getVariable("outputPayrollService");//TODO
		}
end

rule "Exceptional leave with total days of sick leave is more than 30 days"
ruleflow-group "select-approvers"
	when
			$r:LeaveRequest(
					status == Status.OPEN, type == Type.NEW, 
					totalAbsenceDaysUntilNow > 30, approvals.size() > 0, 
					$approvals: approvals,
					leaveType == LeaveType.EXCEPTIONAL
			) 
	then
		for (int index = 0; index < $approvals.size(); index++) {
			LeaveApproval approval = $approvals.get(index);
			Map params = new HashMap();
			params.put("reviewAndApprove", approval.getType());
			params.put("approvalType", approval.getType());
			params.put("vacationBalance", Boolean.TRUE);
			Object obj = kcontext.getKieRuntime().startProcess("DMDemo.vac02", params);
			WorkflowProcessInstanceImpl proc = (WorkflowProcessInstanceImpl) obj;
			proc.getVariable("approvedBySupervisor"); //TODO
			proc.getVariable("approvedByVacationService");//TODO
			proc.getVariable("outputPayrollService");//TODO
		}
end

rule "Annual leave (without salary) with total days of sick leave is less or equal than 30 days"
ruleflow-group "select-approvers"
	when
			$r:LeaveRequest(
					status == Status.OPEN, type == Type.NEW, 
					totalAbsenceDaysUntilNow <= 30, approvals.size() > 0, 
					$approvals: approvals,
					leaveType == LeaveType.ANNUAL,
					requestPayment == false
			) 
	then
		for (int index = 0; index < $approvals.size(); index++) {
			LeaveApproval approval = $approvals.get(index);
			Map params = new HashMap();
			params.put("reviewAndApprove", approval.getType());
			params.put("approvalType", approval.getType());
			params.put("vacationBalance", Boolean.TRUE);
			Object obj = kcontext.getKieRuntime().startProcess("DMDemo.vac03", params);
			WorkflowProcessInstanceImpl proc = (WorkflowProcessInstanceImpl) obj;
			proc.getVariable("approvedBySupervisor"); //TODO
			proc.getVariable("approvedByVacationService");//TODO
			proc.getVariable("outputTicketService");//TODO
		}
end

rule "Annual leave (with salary) with total days of sick leave is less or equal than 30 days"
ruleflow-group "select-approvers"
	when
			$r:LeaveRequest(
					status == Status.OPEN, type == Type.NEW, 
					totalAbsenceDaysUntilNow <= 30, approvals.size() > 0, 
					$approvals: approvals,
					leaveType == LeaveType.ANNUAL,
					requestPayment == true
			) 
	then
		for (int index = 0; index < $approvals.size(); index++) {
			LeaveApproval approval = $approvals.get(index);
			Map params = new HashMap();
			params.put("reviewAndApprove", approval.getType());
			params.put("approvalType", approval.getType());
			params.put("vacationBalance", Boolean.TRUE);
			Object obj = kcontext.getKieRuntime().startProcess("DMDemo.vac04", params);
			WorkflowProcessInstanceImpl proc = (WorkflowProcessInstanceImpl) obj;
			proc.getVariable("approvedBySupervisor"); //TODO
			proc.getVariable("approvedByVacationService");//TODO
			proc.getVariable("outputPayrollService");//TODO
			proc.getVariable("outputTicketService");//TODO
		}
end

rule "Modify Annual leave (with salary)"
ruleflow-group "select-approvers"
	when
			$r:LeaveRequest(
					status == Status.OPEN, type == Type.MODIFY, 
					approvals.size() > 0, $approvals: approvals,
					leaveType == LeaveType.ANNUAL,
					requestPayment == true
			) 
	then
		for (int index = 0; index < $approvals.size(); index++) {
			LeaveApproval approval = $approvals.get(index);
			Map params = new HashMap();
			params.put("reviewAndApprove", approval.getType());
			params.put("approvalType", approval.getType());
			params.put("vacationBalance", Boolean.TRUE);
			Object obj = kcontext.getKieRuntime().startProcess("DMDemo.vac05", params);
			WorkflowProcessInstanceImpl proc = (WorkflowProcessInstanceImpl) obj;
			proc.getVariable("approvedBySupervisor"); //TODO
			proc.getVariable("approvedByVacationService");//TODO
			proc.getVariable("outputPayrollService");//TODO
			proc.getVariable("outputTicketService");//TODO
		}
end

rule "Cancel Annual leave (with salary)"
ruleflow-group "select-approvers"
	when
			$r:LeaveRequest(
					status == Status.OPEN, type == Type.CANCEL, 
					approvals.size() > 0, $approvals: approvals,
					leaveType == LeaveType.ANNUAL,
					requestPayment == true
			) 
	then
		for (int index = 0; index < $approvals.size(); index++) {
			LeaveApproval approval = $approvals.get(index);
			Map params = new HashMap();
			params.put("reviewAndApprove", approval.getType());
			params.put("approvalType", approval.getType());
			params.put("vacationBalance", Boolean.TRUE);
			Object obj = kcontext.getKieRuntime().startProcess("DMDemo.vac05", params);
			WorkflowProcessInstanceImpl proc = (WorkflowProcessInstanceImpl) obj;
			proc.getVariable("approvedBySupervisor"); //TODO
			proc.getVariable("approvedByVacationService");//TODO
			proc.getVariable("outputPayrollService");//TODO
			proc.getVariable("outputTicketService");//TODO
		}
end

rule "Modify Annual leave (without salary)"
ruleflow-group "select-approvers"
	when
			$r:LeaveRequest(
					status == Status.OPEN, type == Type.MODIFY, 
					approvals.size() > 0, $approvals: approvals,
					leaveType == LeaveType.ANNUAL,
					requestPayment == false
			) 
	then
		for (int index = 0; index < $approvals.size(); index++) {
			LeaveApproval approval = $approvals.get(index);
			Map params = new HashMap();
			params.put("reviewAndApprove", approval.getType());
			params.put("approvalType", approval.getType());
			params.put("vacationBalance", Boolean.TRUE);
			Object obj = kcontext.getKieRuntime().startProcess("DMDemo.vac06", params);
			WorkflowProcessInstanceImpl proc = (WorkflowProcessInstanceImpl) obj;
			proc.getVariable("approvedBySupervisor"); //TODO
			proc.getVariable("approvedByVacationService");//TODO
			proc.getVariable("outputTicketService");//TODO
		}
end

rule "Cancel Annual leave (without salary)"
ruleflow-group "select-approvers"
	when
			$r:LeaveRequest(
					status == Status.OPEN, type == Type.CANCEL, 
					approvals.size() > 0, $approvals: approvals,
					leaveType == LeaveType.ANNUAL,
					requestPayment == false
			) 
	then
		for (int index = 0; index < $approvals.size(); index++) {
			LeaveApproval approval = $approvals.get(index);
			Map params = new HashMap();
			params.put("reviewAndApprove", approval.getType());
			params.put("approvalType", approval.getType());
			params.put("vacationBalance", Boolean.TRUE);
			Object obj = kcontext.getKieRuntime().startProcess("DMDemo.vac06", params);
			WorkflowProcessInstanceImpl proc = (WorkflowProcessInstanceImpl) obj;
			proc.getVariable("approvedBySupervisor"); //TODO
			proc.getVariable("approvedByVacationService");//TODO
			proc.getVariable("outputTicketService");//TODO
		}
end
